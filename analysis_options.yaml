# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - prefer_const_constructors
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_const_constructors_in_immutables
    - prefer_final_locals
    - camel_case_types
    - camel_case_extensions
    - library_names
    - file_names
    - library_prefixes
    - non_constant_identifier_names
    - constant_identifier_names # prefer
    - directives_ordering
    #- lines_longer_than_80_chars # avoid
    - curly_braces_in_flow_control_structures

    # DOCUMENTATION
    #- slash_for_doc_comments
    #- package_api_docs # prefer
    #- public_member_api_docs # prefer
    #- comment_references # Unused because https://github.com/dart-lang/sdk/issues/36974

    # USAGE
    - implementation_imports
    - avoid_relative_lib_imports # prefer
    #- prefer_relative_imports # prefer
    - prefer_adjacent_string_concatenation
    - prefer_interpolation_to_compose_strings # prefer
    - unnecessary_brace_in_string_interps # avoid
    - prefer_collection_literals
    - avoid_function_literals_in_foreach_calls # avoid
    - prefer_iterable_whereType
    - prefer_function_declarations_over_variables
    - unnecessary_lambdas
    - avoid_init_to_null
    - unnecessary_getters_setters
    #- unnecessary_getters # prefer # Disabled pending fix: https://github.com/dart-lang/linter/issues/23
    #- prefer_expression_function_bodies # consider
    - unnecessary_this
    - prefer_initializing_formals
    - type_init_formals
    - empty_constructor_bodies
    - unnecessary_new
    - unnecessary_const
    #- avoid_catches_without_on_clauses # avoid
    #- avoid_catching_errors
    - use_rethrow_when_possible

    # DESIGN
    - use_to_and_as_if_applicable # prefer
    - one_member_abstracts # avoid
    #- avoid_classes_with_only_static_members # avoid
    - prefer_mixin
    - prefer_final_fields # prefer
    - use_setters_to_change_properties
    - avoid_setters_without_getters
    - avoid_returning_null # avoid
    - avoid_returning_this # avoid
    #- type_annotate_public_apis # prefer
    #- prefer_typing_uninitialized_variables # consider
    - omit_local_variable_types # avoid
    - avoid_types_on_closure_parameters # avoid
    - avoid_return_types_on_setters # avoid
    - prefer_generic_function_type_aliases
    - avoid_private_typedef_functions # prefer
    - use_function_type_syntax_for_parameters # consider
    #- avoid_positional_boolean_parameters # avoid
    - hash_and_equals
    - avoid_equals_and_hash_code_on_mutable_classes # avoid
    - avoid_null_checks_in_equality_operators

    #FLUTTER
    - avoid_print
    - avoid_unnecessary_containers
    - avoid_web_libraries_in_flutter
    - no_logic_in_create_state
    - sized_box_for_whitespace
    - use_full_hex_values_for_flutter_colors
    - use_key_in_widget_constructors

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
